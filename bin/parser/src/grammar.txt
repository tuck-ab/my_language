Program :== Block

Block :== [Stmt]

Stmt :== VAR "=" Expr;
      |  IF "(" Expr ")" "{" Block "}" ElseIf Else
      |  REPEAT "(" Expr ")" "{" Block "}"
      |  OUTPUT Expr;

ElseIf :?= [ELSEIF "(" Expr ")" "{" Block "}"]
Else   :?= ELSE "{" Block "}"

Expr :== INT
      |  VAR
      |  Expr OP Expr

Expr' :?= OP Expr Expr'

rval ::= rvaland rvalor
rvalor ::= "||" rvaland rvalor
        | epsilon
rvaland ::= rvaleq rvaland’
rvaland’ ::= "&&" rvaleq rvaland’
          | epsilon
rvaleq ::= rvalcomp rvaleq’
rvaleq’ ::= "==" rvalcomp rvaleq’ | "!=" rvalcomp rvaleq’
         | epsilon
rvalcomp ::= rvaladd rvalcomp’
rvalcomp’ ::= "<=" rvaladd rvalcomp’ | "<" rvaladd rvalcomp’
           | ">=" rvaladd rvalcomp’ | ">" rvaladd rvalcomp’
           | epsilon
rvaladd ::= rvalmult rvaladd’
rvaladd’ ::= "+" rvalmult rvaladd’ | "-" rvalmult rvaladd’
          | epsilon
rvalmult ::= rvalneg rvalmult’
rvalmult’ ::= "*" rvalneg rvalmult’ | "/" rvalneg rvalmult’
            | "%" rvalneg rvalmult’
            | epsilon
rvalneg ::= "-" rvalneg | "!" rvalneg
         | rvalbr
rvalbr ::= "(" expr ")"
        | rvalvar
rvalvar ::= IDENT | IDENT "(" args ")"
         | rvallit
rvallit ::= INT_LIT | FLOAT_LIT | BOOL_LIT

OP :== {+ - ==}